blueprint:
  name: Reolink Camera Alert (Snapshot, Actions, Snooze per-camera or All)
  description: >
    Snapshot notification with optional buttons (Open URL / Open Reolink) and Snooze.
    Per-camera Snooze uses a unique action so only this automation reacts. Optional Snooze All
    uses a shared global timer. Uses a single rolling snapshot file. Title empty by default;
    message defaults to “Person detected at <Camera>”. Includes simple cooldown & optional filters.
  domain: automation

  input:
    person_sensor:
      name: Person sensor (binary_sensor)
      selector:
        entity: { domain: binary_sensor }

    extra_sensors:
      name: Additional event sensors (optional)
      description: Add doorbell visitor/pressed here; leave empty for cameras.
      default: []
      selector:
        entity:
          domain: binary_sensor
          multiple: true

    camera:
      name: Camera entity
      selector:
        entity: { domain: camera }

    notify_devices:
      name: Phones to notify
      selector:
        device:
          integration: mobile_app
          multiple: true

    # Texts
    custom_title:
      name: Custom notification title (optional)
      description: Leave blank to keep the title empty (default).
      default: ""
      selector: { text: {} }

    custom_message:
      name: Custom notification text (optional)
      description: >
        Placeholders: {camera_name}, {event}. Leave blank for "Person detected at {camera_name}".
      default: ""
      selector: { text: {} }

    filename_stem:
      name: Snapshot filename stem (no extension)
      default: "camera"
      selector: { text: {} }

    notification_icon_mdi:
      name: Notification icon (mdi)
      description: e.g. mdi:cctv (optional)
      default: "mdi:cctv"
      selector: { icon: {} }

    # Reolink deep-link
    reolink_uid:
      name: Reolink UID
      selector: { text: {} }

    reolink_devname:
      name: Reolink device name
      default: "NVR"
      selector: { text: {} }

    nvr_channel_index:
      name: NVR channel number (1–32)
      default: 1
      selector:
        number: { min: 1, max: 32, step: 1, mode: box }

    # Optional URL action
    enable_open_url_button:
      name: Show "Open URL" button
      default: false
      selector: { boolean: {} }

    open_url:
      name: URL to open
      default: ""
      selector: { text: {} }

    open_url_title:
      name: Open URL button label
      default: "Open URL"
      selector: { text: {} }

    # --- Snooze settings ---
    show_silence_button:
      name: Show "Snooze (this camera)" button
      default: true
      selector: { boolean: {} }

    snooze_minutes:
      name: Snooze duration (minutes)
      default: 30
      selector:
        number: { min: 1, max: 360, mode: box }

    use_timer_snooze:
      name: Use timer-based snooze (recommended)
      description: If ON and a timer is selected below, Snooze will start the timer instead of disabling the automation.
      default: true
      selector: { boolean: {} }

    camera_snooze_timer:
      name: Camera snooze timer (optional)
      description: Timer helper for this camera. Alerts suppressed while it runs.
      default: ""
      selector:
        entity:
          domain: timer

    enable_snooze_all:
      name: Show "Snooze all" button
      default: false
      selector: { boolean: {} }

    global_snooze_timer:
      name: Global snooze timer (optional)
      description: Use the same timer across all camera automations to snooze everything together.
      default: ""
      selector:
        entity:
          domain: timer

    # Filters
    presence_filter_enabled:
      name: Enable presence filter
      default: false
      selector: { boolean: {} }

    presence_entities:
      name: Presence entities (people/device trackers/groups)
      description: Only notify if ALL of these are NOT home (used when presence filter is enabled).
      default: []
      selector:
        entity:
          multiple: true
          filter:
            domain:
              - device_tracker
              - person
              - group

    disable_hours:
      name: Quiet hours (0–23, optional)
      description: Suppress notifications during selected hours.
      default: []
      selector:
        select:
          multiple: true
          options:
            - "0"
            - "1"
            - "2"
            - "3"
            - "4"
            - "5"
            - "6"
            - "7"
            - "8"
            - "9"
            - "10"
            - "11"
            - "12"
            - "13"
            - "14"
            - "15"
            - "16"
            - "17"
            - "18"
            - "19"
            - "20"
            - "21"
            - "22"
            - "23"

    cooldown_seconds:
      name: Cooldown (seconds, optional)
      description: Minimum time between alerts from this automation.
      default: 0
      selector:
        number: { min: 0, max: 86400, mode: box }

    # Android channel
    android_channel:
      name: Android notification channel name
      default: "Security"
      selector: { text: {} }

    android_importance:
      name: Android channel importance
      default: "high"
      selector:
        select:
          options: [max, high, default, low, min]

    queue_max:
      name: Max queued runs
      default: 10
      selector:
        number: { min: 1, max: 50, step: 1, mode: slider }

mode: queued
max: !input queue_max

# Unique action IDs per automation (so only THIS one snoozes)
trigger_variables:
  snooze_action: "SNOOZE_{{ this.entity_id }}"
  snooze_all_action: "SNOOZE_ALL_REOLINK"

triggers:
  - id: person
    platform: state
    entity_id: !input person_sensor
    to: "on"

  - id: visitor
    platform: template
    value_template: >-
      {% set ents = expand(extra_sensors_list) %}
      {% if ents | length == 0 %} false
      {% else %} {{ (ents | selectattr('state','eq','on') | list | length) > 0 }}
      {% endif %}

  # Snooze buttons (per-camera & global)
  - id: snooze
    platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: "{{ snooze_action }}"

  - id: snooze_all
    platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: "{{ snooze_all_action }}"

# Variables
variables:
  filename_stem_var: !input filename_stem

  reolink_uid: !input reolink_uid
  reolink_devname: !input reolink_devname
  nvr_channel_index_var: !input nvr_channel_index

  notify_device_ids: !input notify_devices
  notify_ids_list: >-
    {{ notify_device_ids if notify_device_ids is iterable else [notify_device_ids] }}

  camera_entity: !input camera
  cam_name: "{{ state_attr(camera_entity, 'friendly_name') or camera_entity }}"

  custom_title_text: !input custom_title
  custom_message_text: !input custom_message

  notification_icon_mdi_var: !input notification_icon_mdi
  android_channel_var: !input android_channel
  android_importance_var: !input android_importance

  enable_open_url_button_var: !input enable_open_url_button
  open_url_text: !input open_url
  open_url_title_text: !input open_url_title

  show_silence_button_var: !input show_silence_button
  snooze_minutes_var: !input snooze_minutes

  use_timer_snooze_var: !input use_timer_snooze
  camera_timer_entity: !input camera_snooze_timer

  enable_snooze_all_var: !input enable_snooze_all
  global_timer_entity: !input global_snooze_timer

  presence_filter_enabled_var: !input presence_filter_enabled
  presence_entities_list: !input presence_entities

  disable_hours_raw: !input disable_hours
  disable_hours_list: "{{ (disable_hours_raw | map('int') | list) if disable_hours_raw is iterable else [] }}"

  cooldown_seconds_var: !input cooldown_seconds
  extra_sensors_list: !input extra_sensors

  snap_rel: "{{ '/media/local/reolink/' ~ filename_stem_var ~ '_latest.jpg' }}"
  snap_abs: "{{ '/media/reolink/' ~ filename_stem_var ~ '_latest.jpg' }}"
  bust: "{{ (now() | as_timestamp) | int }}"

  # Channel bitmask from 1..32
  channel_mask: "{{ (2 ** (nvr_channel_index_var | int - 1)) | int }}"

  # Make action IDs available for building buttons
  snooze_action_var: "{{ snooze_action }}"
  snooze_all_action_var: "{{ snooze_all_action }}"

conditions: []

actions:
  - choose:
      # ---- Snooze (this camera) pressed ----
      - conditions:
          - condition: trigger
            id: snooze
        sequence:
          # Preferred: start camera timer if enabled/available
          - choose:
              - conditions:
                  - condition: template
                    value_template: >-
                      {{ use_timer_snooze_var and (camera_timer_entity | string) not in ['', 'None', 'none'] }}
                sequence:
                  - service: timer.start
                    target:
                      entity_id: "{{ camera_timer_entity }}"
                    data:
                      duration: "{{ (snooze_minutes_var | int) * 60 }}"
                  - service: "{{ 'notify.mobile_app_' ~ (device_attr(trigger.event.data.device_id, 'name') | slugify) }}"
                    data:
                      title: ""
                      message: "{{ 'Snoozed this camera for ' ~ snooze_minutes_var ~ ' min' }}"
                      data:
                        channel: "{{ android_channel_var }}"
                        importance: "{{ android_importance_var }}"
                        notification_icon: "{{ notification_icon_mdi_var }}"
            default:
              # Fallback: temporarily disable only THIS automation
              - action: automation.turn_off
                target:
                  entity_id: "{{ this.entity_id }}"
                data:
                  stop_actions: false
              - service: "{{ 'notify.mobile_app_' ~ (device_attr(trigger.event.data.device_id, 'name') | slugify) }}"
                data:
                  title: ""
                  message: "{{ 'Paused this camera for ' ~ snooze_minutes_var ~ ' min' }}"
                  data:
                    channel: "{{ android_channel_var }}"
                    importance: "{{ android_importance_var }}"
                    notification_icon: "{{ notification_icon_mdi_var }}"
              - delay:
                  minutes: !input snooze_minutes
              - action: automation.turn_on
                target:
                  entity_id: "{{ this.entity_id }}"

      # ---- Snooze ALL pressed ----
      - conditions:
          - condition: trigger
            id: snooze_all
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: >-
                      {{ enable_snooze_all_var and (global_timer_entity | string) not in ['', 'None', 'none'] }}
                sequence:
                  - service: timer.start
                    target:
                      entity_id: "{{ global_timer_entity }}"
                    data:
                      duration: "{{ (snooze_minutes_var | int) * 60 }}"
                  - service: "{{ 'notify.mobile_app_' ~ (device_attr(trigger.event.data.device_id, 'name') | slugify) }}"
                    data:
                      title: ""
                      message: "{{ 'Snoozed ALL cameras for ' ~ snooze_minutes_var ~ ' min' }}"
                      data:
                        channel: "{{ android_channel_var }}"
                        importance: "{{ android_importance_var }}"
                        notification_icon: "{{ notification_icon_mdi_var }}"
            default:
              # No global timer configured; fall back to per-camera behavior for this automation only
              - service: "{{ 'notify.mobile_app_' ~ (device_attr(trigger.event.data.device_id, 'name') | slugify) }}"
                data:
                  title: ""
                  message: "No global timer set. Snoozing this camera only."
                  data:
                    channel: "{{ android_channel_var }}"
                    importance: "{{ android_importance_var }}"
                    notification_icon: "{{ notification_icon_mdi_var }}"
              - choose:
                  - conditions:
                      - condition: template
                        value_template: >-
                          {{ use_timer_snooze_var and (camera_timer_entity | string) not in ['', 'None', 'none'] }}
                    sequence:
                      - service: timer.start
                        target:
                          entity_id: "{{ camera_timer_entity }}"
                        data:
                          duration: "{{ (snooze_minutes_var | int) * 60 }}"
                default:
                  - action: automation.turn_off
                    target:
                      entity_id: "{{ this.entity_id }}"
                    data:
                      stop_actions: false
                  - delay:
                      minutes: !input snooze_minutes
                  - action: automation.turn_on
                    target:
                      entity_id: "{{ this.entity_id }}"

      # ---- Main path: person or extra sensor fired ----
      - conditions:
          - condition: template
            value_template: "{{ trigger.platform in ['state','template'] }}"
        sequence:
          # Cooldown
          - condition: template
            value_template: >-
              {{ cooldown_seconds_var == 0
                 or not this.attributes.last_triggered
                 or (now() - this.attributes.last_triggered).total_seconds() > cooldown_seconds_var }}

          # Presence filter (if enabled)
          - condition: template
            value_template: >-
              {% if not presence_filter_enabled_var %} true
              {% else %}
                {{ (expand(presence_entities_list) | selectattr('state','eq','home') | list | length) == 0 }}
              {% endif %}

          # Quiet hours
          - condition: template
            value_template: >-
              {{ (disable_hours_list | length == 0) or (now().hour not in disable_hours_list) }}

          # Snooze gating: camera timer + global timer must be idle (if provided)
          - condition: template
            value_template: >-
              {% set cam_idle = (not use_timer_snooze_var)
                                 or (camera_timer_entity | string) in ['', 'None', 'none']
                                 or is_state(camera_timer_entity, 'idle') %}
              {% set all_idle = (not enable_snooze_all_var)
                                 or (global_timer_entity | string) in ['', 'None', 'none']
                                 or is_state(global_timer_entity, 'idle') %}
              {{ cam_idle and all_idle }}

          # Snapshot to single rolling file
          - action: camera.snapshot
            data:
              entity_id: !input camera
              filename: "{{ snap_abs }}"
          - delay: "00:00:01"

          - variables:
              almtype: "{{ 'PEOPLE' if trigger.id == 'person' else 'VISITOR' }}"
              title_final: "{{ custom_title_text | trim }}"
              event_text: "{{ 'Person detected' if trigger.id == 'person' else 'Doorbell pressed' }}"
              msg_default: "{{ 'Person detected at ' ~ cam_name }}"
              msg_final: >-
                {% set base = custom_message_text | trim %}
                {% if base == '' %}
                  {{ msg_default }}
                {% else %}
                  {{ base
                     | replace('{camera_name}', cam_name)
                     | replace('{event}', event_text) }}
                {% endif %}
              intent_uri: >-
                intent://scan/#Intent;scheme=reolink;package=com.mcu.reolink;action=android.intent.action.VIEW;S.UID={{ reolink_uid }};S.DEVNAME={{ reolink_devname }};S.ALMTYPE={{ almtype }};S.ALMCHN={{ channel_mask }};S.ALMNAME=Detection;S.ALMTIME={{ now().isoformat() }};end

          # Send to each selected device
          - repeat:
              for_each: "{{ notify_ids_list }}"
              sequence:
                - variables:
                    btn_snooze_title: "{{ 'Snooze ' ~ snooze_minutes_var ~ 'm' }}"
                    btn_snooze_all_title: "{{ 'Snooze all ' ~ snooze_minutes_var ~ 'm' }}"
                - service: "{{ 'notify.mobile_app_' ~ (device_attr(repeat.item, 'name') | slugify) }}"
                  data:
                    title: "{{ title_final }}"
                    message: "{{ msg_final }}"
                    data:
                      image: "{{ snap_rel }}?v={{ bust }}"
                      channel: "{{ android_channel_var }}"
                      importance: "{{ android_importance_var }}"
                      notification_icon: "{{ notification_icon_mdi_var }}"
                      clickAction: "{{ intent_uri }}"
                      actions: >-
                        {%- set items = [] -%}
                        {%- if enable_open_url_button_var and (open_url_text | trim) != '' -%}
                          {%- set items = items + [ {'action':'URI','title':open_url_title_text,'uri':open_url_text} ] -%}
                        {%- endif -%}
                        {%- set items = items + [ {'action':'URI','title':'Open Reolink','uri':intent_uri} ] -%}
                        {%- if show_silence_button_var -%}
                          {%- set items = items + [ {'action':snooze_action_var,'title':btn_snooze_title,'icon':'mdi:bell-sleep-outline'} ] -%}
                        {%- endif -%}
                        {%- if enable_snooze_all_var -%}
                          {%- set items = items + [ {'action':snooze_all_action_var,'title':btn_snooze_all_title,'icon':'mdi:bell-off'} ] -%}
                        {%- endif -%}
                        {{ items }}
    default: []
