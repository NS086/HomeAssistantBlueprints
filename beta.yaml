blueprint:
  name: Reolink Camera Alert (Android) — Snapshot, Actions, Silence, Filters
  description: >
    Android snapshot notifications with optional "Open URL" (custom label), default tap to Reolink,
    and silence buttons (this camera / all selected). Presence & time filters plus a cooldown.
    Uses one rolling snapshot file. Title defaults to empty; message defaults to "Person detected at <Camera>".
  domain: automation

  input:
    # --- Triggers & camera ---
    person_sensor:
      name: Person sensor (binary_sensor)
      selector:
        entity: { domain: binary_sensor }

    extra_sensors:
      name: Additional event sensors (optional)
      description: Add doorbell visitor/pressed etc. Leave empty if not used.
      default: []
      selector:
        entity:
          domain: binary_sensor
          multiple: true

    camera:
      name: Camera entity
      selector:
        entity: { domain: camera }

    notify_devices:
      name: Phones to notify (Android)
      selector:
        device:
          integration: mobile_app
          multiple: true

    # --- Texts & look ---
    custom_title:
      name: Custom notification title (optional)
      default: ""
      selector: { text: {} }

    custom_message:
      name: Custom notification text (optional)
      description: >
        Placeholders: {camera_name}, {event}. Leave blank to use:
        "Person detected at {camera_name}".
      default: ""
      selector: { text: {} }

    filename_stem:
      name: Snapshot filename stem (no extension)
      default: "camera"
      selector: { text: {} }

    notification_icon_mdi:
      name: Notification icon (mdi)
      description: MDI icon like "mdi:cctv".
      default: "mdi:cctv"
      selector: { icon: {} }

    # --- Reolink deep-link params (Android) ---
    reolink_uid:
      name: Reolink UID
      selector: { text: {} }

    reolink_devname:
      name: Reolink device name
      default: "NVR"
      selector: { text: {} }

    nvr_channel_index:
      name: NVR channel number (1–32)
      default: 1
      selector:
        number: { min: 1, max: 32, step: 1, mode: box }

    # --- Optional URL action ---
    enable_open_url_button:
      name: Show "Open URL" button
      default: false
      selector: { boolean: {} }

    open_url:
      name: URL to open
      default: ""
      selector: { text: {} }

    open_url_title:
      name: "Open URL" button label
      default: "Open URL"
      selector: { text: {} }

    # --- Silence buttons ---
    show_silence_this_button:
      name: Show "Silence this camera" button
      default: true
      selector: { boolean: {} }

    show_silence_all_button:
      name: Show "Silence all selected automations" button
      default: false
      selector: { boolean: {} }

    automations_to_silence:
      name: Automations to include in "Silence all"
      default: []
      selector:
        entity:
          domain: automation
          multiple: true

    silence_minutes:
      name: Silence duration (minutes)
      default: 30
      selector:
        number: { min: 1, max: 360, mode: box }

    # --- Filters ---
    presence_filter_enabled:
      name: Enable presence filter
      default: false
      selector: { boolean: {} }

    presence_entities:
      name: Presence entities (people/device trackers/groups)
      description: Only notify if ALL of these are NOT home (when enabled).
      default: []
      selector:
        entity:
          multiple: true
          filter:
            domain: [device_tracker, person, group]

    disable_hours:
      name: Quiet hours (0–23, optional)
      description: Suppress notifications during selected hours.
      default: []
      selector:
        select:
          multiple: true
          options:
            - "0"  - "1"  - "2"  - "3"  - "4"  - "5"
            - "6"  - "7"  - "8"  - "9"  - "10" - "11"
            - "12" - "13" - "14" - "15" - "16" - "17"
            - "18" - "19" - "20" - "21" - "22" - "23"

    cooldown_seconds:
      name: Cooldown (seconds, optional)
      description: Minimum time between alerts from this automation.
      default: 0
      selector:
        number: { min: 0, max: 86400, mode: box }

    # --- Android channel ---
    android_channel:
      name: Android notification channel name
      default: "Security"
      selector: { text: {} }

    android_importance:
      name: Android channel importance
      default: "high"
      selector:
        select:
          options: [max, high, default, low, min]

    queue_max:
      name: Max queued runs
      default: 10
      selector:
        number: { min: 1, max: 50, step: 1, mode: slider }

mode: queued
max: !input queue_max

# Make inputs available to template triggers
trigger_variables:
  extra_sensors_list: !input extra_sensors

trigger:
  - id: person
    platform: state
    entity_id: !input person_sensor
    to: "on"

  - id: visitor
    platform: template
    value_template: >-
      {% set ents = expand(extra_sensors_list) %}
      {% if ents | length == 0 %}
        false
      {% else %}
        {{ (ents | selectattr('state','eq','on') | list | length) > 0 }}
      {% endif %}

  # Android action buttons
  - id: silence_this
    platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: SILENCE_THIS

  - id: silence_all
    platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: SILENCE_ALL

variables:
  # Inputs
  filename_stem_var: !input filename_stem
  reolink_uid: !input reolink_uid
  reolink_devname: !input reolink_devname
  nvr_channel_index_var: !input nvr_channel_index

  notify_device_ids: !input notify_devices
  camera_entity: !input camera
  custom_title_text: !input custom_title
  custom_message_text: !input custom_message
  notification_icon_mdi_var: !input notification_icon_mdi
  android_channel_var: !input android_channel
  android_importance_var: !input android_importance

  enable_open_url_button_var: !input enable_open_url_button
  open_url_text: !input open_url
  open_url_title_text: !input open_url_title

  show_silence_this_button_var: !input show_silence_this_button
  show_silence_all_button_var: !input show_silence_all_button
  automations_to_silence_list: !input automations_to_silence
  silence_minutes_var: !input silence_minutes

  presence_filter_enabled_var: !input presence_filter_enabled
  presence_entities_list: !input presence_entities

  disable_hours_raw: !input disable_hours
  disable_hours_list: "{{ (disable_hours_raw | map('int') | list) if disable_hours_raw is iterable else [] }}"
  cooldown_seconds_var: !input cooldown_seconds

  # Computed helpers
  notify_ids_list: >-
    {{ notify_device_ids if notify_device_ids is iterable else [notify_device_ids] }}
  cam_name: "{{ state_attr(camera_entity, 'friendly_name') or camera_entity }}"
  snap_rel: "{{ '/media/local/reolink/' ~ filename_stem_var ~ '_latest.jpg' }}"
  snap_abs: "{{ '/media/reolink/' ~ filename_stem_var ~ '_latest.jpg' }}"
  bust: "{{ (now() | as_timestamp) | int }}"
  # Reolink alarm channel bitmask from 1..32
  channel_mask: "{{ (2 ** (nvr_channel_index_var | int - 1)) | int }}"

condition: []

action:
  - choose:
      # =======================
      # SILENCE THIS automation
      # =======================
      - conditions:
          - condition: trigger
            id: silence_this
        sequence:
          # Friendly ack to all selected phones (safe; skips if none selected)
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ notify_ids_list | length > 0 }}"
                sequence:
                  - repeat:
                      for_each: "{{ notify_ids_list }}"
                      sequence:
                        - service: "{{ 'notify.mobile_app_' ~ (device_attr(repeat.item, 'name') | slugify) }}"
                          data:
                            title: ""
                            message: "{{ 'Notifications silenced for ' ~ silence_minutes_var ~ ' min' }}"
                            data:
                              channel: "{{ android_channel_var }}"
                              importance: "{{ android_importance_var }}"
                              notification_icon: "{{ notification_icon_mdi_var }}"
            default: []

          # Disable only this automation, then re-enable after the delay
          - action: automation.turn_off
            target:
              entity_id: "{{ this.entity_id }}"
            data:
              stop_actions: false

          - delay:
              minutes: !input silence_minutes

          - action: automation.turn_on
            target:
              entity_id: "{{ this.entity_id }}"

      # ===============================
      # SILENCE ALL selected automations
      # ===============================
      - conditions:
          - condition: trigger
            id: silence_all
        sequence:
          - variables:
              all_to_toggle: >-
                {{ ([this.entity_id] + (automations_to_silence_list if automations_to_silence_list is iterable else [])) | unique | list }}

          # Ack to all selected phones (optional)
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ notify_ids_list | length > 0 }}"
                sequence:
                  - repeat:
                      for_each: "{{ notify_ids_list }}"
                      sequence:
                        - service: "{{ 'notify.mobile_app_' ~ (device_attr(repeat.item, 'name') | slugify) }}"
                          data:
                            title: ""
                            message: "{{ 'Selected automations silenced for ' ~ silence_minutes_var ~ ' min' }}"
                            data:
                              channel: "{{ android_channel_var }}"
                              importance: "{{ android_importance_var }}"
                              notification_icon: "{{ notification_icon_mdi_var }}"
            default: []

          - action: automation.turn_off
            target:
              entity_id: "{{ all_to_toggle }}"
            data:
              stop_actions: false

          - delay:
              minutes: !input silence_minutes

          - action: automation.turn_on
            target:
              entity_id: "{{ all_to_toggle }}"

      # ===============================
      # Main path: person/visitor fired
      # ===============================
      - conditions:
          - condition: template
            value_template: "{{ trigger.platform in ['state','template'] }}"
        sequence:
          # Cooldown
          - condition: template
            value_template: >-
              {{ cooldown_seconds_var == 0
                 or not this.attributes.last_triggered
                 or (now() - this.attributes.last_triggered).total_seconds() > cooldown_seconds_var }}

          # Presence filter
          - condition: template
            value_template: >-
              {% if not presence_filter_enabled_var %}
                true
              {% else %}
                {{ (expand(presence_entities_list)
                    | selectattr('state','eq','home')
                    | list | length) == 0 }}
              {% endif %}

          # Quiet hours
          - condition: template
            value_template: >-
              {{ (disable_hours_list | length == 0)
                 or (now().hour not in disable_hours_list) }}

          # Take snapshot (single rolling file)
          - action: camera.snapshot
            data:
              entity_id: !input camera
              filename: "{{ snap_abs }}"
          - delay: "00:00:01"

          # Per-event vars
          - variables:
              almtype: "{{ 'PEOPLE' if trigger.id == 'person' else 'VISITOR' }}"
              title_final: "{{ custom_title_text | trim }}"
              event_text: "{{ 'Person detected' if trigger.id == 'person' else 'Doorbell pressed' }}"
              msg_default: "{{ 'Person detected at ' ~ cam_name }}"
              msg_final: >-
                {% set base = custom_message_text | trim %}
                {% if base == '' %}
                  {{ msg_default }}
                {% else %}
                  {{ base
                     | replace('{camera_name}', cam_name)
                     | replace('{event}', event_text) }}
                {% endif %}
              intent_uri: >-
                intent://scan/#Intent;scheme=reolink;package=com.mcu.reolink;action=android.intent.action.VIEW;S.UID={{ reolink_uid }};S.DEVNAME={{ reolink_devname }};S.ALMTYPE={{ almtype }};S.ALMCHN={{ channel_mask }};S.ALMNAME=Detection;S.ALMTIME={{ now().isoformat() }};end

              actions_list: >-
                {% set items = [] %}
                {% if enable_open_url_button_var and (open_url_text | trim) != '' %}
                  {% set items = items + [ {'action':'URI','title': open_url_title_text,'uri': open_url_text} ] %}
                {% endif %}
                {% set items = items + [ {'action':'URI','title':'Open Reolink','uri': intent_uri} ] %}
                {% if show_silence_this_button_var %}
                  {% set items = items + [ {'action':'SILENCE_THIS','title':'Silence ' ~ silence_minutes_var ~ 'm'} ] %}
                {% endif %}
                {% if show_silence_all_button_var and (automations_to_silence_list | length > 0) %}
                  {% set items = items + [ {'action':'SILENCE_ALL','title':'Silence ALL ' ~ silence_minutes_var ~ 'm'} ] %}
                {% endif %}
                {{ items }}

          # Notify each selected Android device
          - repeat:
              for_each: "{{ notify_ids_list }}"
              sequence:
                - service: "{{ 'notify.mobile_app_' ~ (device_attr(repeat.item, 'name') | slugify) }}"
                  data:
                    title: "{{ title_final }}"
                    message: "{{ msg_final }}"
                    data:
                      image: "{{ snap_rel }}?v={{ bust }}"
                      channel: "{{ android_channel_var }}"
                      importance: "{{ android_importance_var }}"
                      notification_icon: "{{ notification_icon_mdi_var }}"
                      clickAction: "{{ intent_uri }}"
                      actions: "{{ actions_list }}"
    default: []
